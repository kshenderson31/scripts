#********************************************************************************************************************************************************************
# 
#********************************************************************************************************************************************************************
#
use strict;
use warnings;

use Net::SSH::Perl;
use Net::OpenSSH;
use IO::Socket;



#********************************************************************************************************************************************************************
# 
#********************************************************************************************************************************************************************
#

use Getopt::Std;
#********************************************************************************************************************************************************************
# 
#********************************************************************************************************************************************************************
#

our %opt;
#********************************************************************************************************************************************************************
# 
#********************************************************************************************************************************************************************
#

getOptions();
#********************************************************************************************************************************************************************
# 
#********************************************************************************************************************************************************************
#

while(<DATA>)
{
	chomp($_);
	
	our($id, $desc, $ip)=split(",", $_);
	
	print "Attempting [$id] $ip, ";
	
	#openSSH($ip);
	perlSSH($ip);
}

#********************************************************************************************************************************************************************
# 
#********************************************************************************************************************************************************************
#
sub openSSH
{
	our $host=shift;
	
	our $ssh = Net::OpenSSH->new($host, user=>"admin", passwd=>"swATL\@2028");
	
	if($ssh->error)
	{
		print "failed; $ssh->error";	
	}
	else
	{
		print "succeeded\n";
		#my @result=$ssh->capture("?");
		#our($output, $errors) = $ssh->capture2("ping 172.20.8.21");
		#print ">>>$output\n";
		undef $ssh;
	}
}
#********************************************************************************************************************************************************************
# 
#********************************************************************************************************************************************************************
#
sub perlSSH
{
	our $host=shift;
	
    our $ssh = Net::SSH::Perl->new($host, debug => 0);
    if($ssh->login("admin", "swATL\@2028"))
    {
    	print "succeeded\n";
    	my($stdout, $stderr, $exit) = $ssh->cmd("show status");
    	print "$stdout|$stderr|$exit\n";
		$ssh->cmd("exit");
		undef $ssh;
    }
    else
    {
    	print "failed\n";
    }
}
#********************************************************************************************************************************************************************
# 
#********************************************************************************************************************************************************************
#

sub getOptions
{
	getopts("h", \%opt);	
}
#********************************************************************************************************************************************************************
# 
#********************************************************************************************************************************************************************
#

sub printChronologicalMessage
{
    my $msg = shift;
    my $log = shift || "Y";
    
    print "[".getFormattedDateAndTime("mmmm dd, yyyy hr:mn:sc")."] $msg\n";
    
    #printChronologicalLogMessage($msg) if $log eq "Y";
}
#********************************************************************************************************************************************************************
# Get the date and time
#********************************************************************************************************************************************************************
#

sub getFormattedDateAndTime
{
	my $format     = shift;
	
	my @monthAbbr  = qw( Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec );
	my @monthNames = qw( January February March April May June July August September October November December );
	my @days       = qw( Sunday Monday Tuesday Wednesday Thursday Friday Saturday );
	my @daysAbbr   = qw( Sun Mon Tue Wed Thu Fri Sat );
	my %numbers;
	
	for my $number(0..60)
	{
		$numbers{$number} = sprintf("%02d", $number);
        if($number < 10)
        {
            my $n = sprintf("%02d", $number);
            $numbers{$n} = $n;
        }
	}
	      
	my ($currSeconds, $currMinutes,$currHour, $currDay, $currMonth, $currYear, $currWeekDay, $currDayOfYear, $isdst) = localtime(time);	
	
	$currYear += 1900;
	$currMonth++;
	
	my $mthIndex = $currMonth - 1;
	my $return   = $format;
	my $yr       = substr($currYear,2,2);
	
	my $hrFmtd   = sprintf("%2d", $currHour);
	
	$currMonth = sprintf("%02d", $currMonth);
	$currDay   = sprintf("%02d", $currDay);
	
	$return =~ s/yyyy/$currYear/g;
	$return =~ s/yy/$yr/g;
	
	$return =~ s/mmmm/$monthNames[$mthIndex]/g;
	$return =~ s/mmm/$monthAbbr[$mthIndex]/g;
	$return =~ s/mm/$currMonth/g;
	$return =~ s/MM/$numbers{$currMonth}/g;
	
	$return =~ s/dd/$numbers{$currDay}/g;
	$return =~ s/d/$currDay/g;
	
	$return =~ s/www/$days[$currWeekDay]/g;
	$return =~ s/ww/$daysAbbr[$currWeekDay]/g;
	
	$return =~ s/hr/$numbers{$currHour}/g;
	$return =~ s/mn/$numbers{$currMinutes}/g;
	$return =~ s/sc/$numbers{$currSeconds}/g;
	
	$return =~ s/j/$currDayOfYear/g;
	
	return $return;
}


__DATA__
ATL.203,ATL-2028-CNBC,166.143.255.70,172.25.1.224,172.25.1.225-254,Yes,Yes,2028